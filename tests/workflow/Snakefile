config["enzyme"] = "NlaIII"


rule all:
    input:
        genome="input/scenario.genome.fasta",
        metadata="output/scenario.metadata.json",
        ubam="output/scenario.monomers.bam",
        bam="output/scenario.processed.bam",

rule pairtools:
  input:
      pairs="output/scenario.processed.pairs.gz"


rule generate_test_data:
    output:
        genome="input/scenario.genome.fasta",
        concatemers="input/scenario.concatemers.fastq",
    params:
        enzyme=config["enzyme"],
    shell:
        "pore-c2 utils create-test-data input/scenario --enzyme {params.enzyme} --seed 421"
        " --num-haplotypes 2 --variant-density 0.01 --num-concatemers 200 "


rule index_genome:
    output:
        metadata="output/scenario.metadata.json",
        mmi="output/scenario.mmi",
        fai="input/scenario.genome.fasta.fai",
        fragment_fasta="output/scenario.fragments.fasta",
        fragment_table="output/scenario.fragments.parquet",
    input:
        genome="input/scenario.genome.fasta",
    params:
        enzyme=config["enzyme"],
        prefix="output/scenario",
    shell:
        "pore-c2 index {input} {params.enzyme} --prefix {params.prefix}"


rule split_concatemers_ubam:
    output:
        ubam="output/scenario.monomers.bam",
    input:
        concatemers="input/scenario.concatemers.fastq",
    params:
        enzyme=config["enzyme"],
    shell:
        "pore-c2 utils digest-concatemers {input} {params.enzyme} {output}"


rule map_monomers:
    output:
        bam="output/scenario.aligned.bam",
    input:
        ubam="output/scenario.monomers.bam",
        mmi="output/scenario.mmi",
    log:
        "output/scenario.aligned.bam.out",
    conda: "minimap"
    shell:
        "(samtools fastq -T '*' {input.ubam} | "
        "minimap2 -ayx  map-ont {input.mmi} - | "
        "samtools sort -t MI -n -o {output.bam} -) &> {log}"


rule process_monomer_alignments:
    output:
        bam="output/scenario.processed.bam",
    input:
        bam="output/scenario.aligned.bam",
    shell:
        "pore-c2 utils process-monomer-alignments {input} {output}"


rule pairtools_parse:
    input:
        bam="output/scenario.processed.bam",
        fai="input/scenario.genome.fasta.fai",
    output:
        pairs="output/scenario.processed.pairs.gz",
        stats="output/scenario.processed.pairs.stats.txt",
    log:
        pairs="output/scenario.processed.pairs.log",
    #conda: "envs/pairtools.yml"
    conda: "pairtools"
    shell:
        "pairtools parse2 -o {output.pairs} --output-stats {output.stats} "
        "-c {input.fai} "
        "--single-end "
        r"""--readid-transform 'readID.split(":")[0]' """
        "--drop-sam --drop-seq --expand "
        "{input.bam} "
