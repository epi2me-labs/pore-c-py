[build-system]
requires = ["hatchling", "hatch-requirements-txt", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pore-c2"
version = "0.2.0"
description = ""
authors = [
  { name = "Eoghan Harrington", email = "eoghan.harrington@nanoporetech.com" },
]
dependencies = [
    "typer>=0.6.1",
    "pysam>=0.19.1",
    "mappy>=2.24",
    "biopython>=1.79",
    "pandas>=1.4.3",
    "polars>=0.13.62",
    "attrs>=22.1.0",
    "cattrs>=22.1.0",
]
requires-python = ">=3.8"
license = { text = "MIT" }

[project.scripts]
pore-c2 = "pore_c2.cli:app"


[tool.conda-lock]
platforms = [
  # 'osx-arm64',  uncomment this if bioconda ever adds support
  'osx-64',
  'linux-64'
]
channels = ['conda-forge', 'bioconda', 'defaults']

[tool.conda-lock.dependencies]
minimap2 = ">=2.24"

# pairtools = ">=1.0.1"   # not available on bioconda yet
[tool.pdm]
[tool.pdm.dev-dependencies]


[tool.pdm.scripts]
test = "pytest "
test_perf = "pytest -p no:pytest-workflow"
test_wf.cmd = "pytest -c tests/workflow/pytest.ini  tests/workflow/"
test_wf.env = { PYTEST_DISABLE_PLUGIN_AUTOLOAD = "1" }
# FIXFIX
#testw.cmd = "pytest -p no:pytest-monitor -p no:pytest-workflow -p  xdist"
#testw.env = { PYTEST_DISABLE_PLUGIN_AUTOLOAD = "1", PYTEST_ADDOPTS="--looponfail "}
cli = "pore-c2"
jupyter = "jupyter lab"


[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
version_files = ["pyproject.toml:version"]
#update_changelog_on_bump = true


[tool.pytest.ini_options]
addopts = "-p no:pytest-workflow"
testpaths = ['tests']
norecursedirs = ["dist", "build", ".tox", "scratch*", ".cache", ".venv", "tests/worflow"]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
looponfailroots = ["tests", "src"]

[tool.isort]
profile = "black"
known_first_party = "aws_interfacing"

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__", ".venv", "scratch"]
venvPath = "./."
venv = ".venv"
extraPaths = ["./.venv"]
reportMissingImports = true
reportMissingTypeStubs = false


[tool.mypy]
files = ["src"]
show_error_codes = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true

[[tool.coverage.run]]
branch = true
source = "pore_c2"
# omit = bad_file.py

[[tool.coverage.paths]]
source = ["src/", "*/site-packages/"]

[[tool.coverage.report]]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
]
